-- we don't know how to generate schema MDA (class Schema) :(
create sequence ID_SEQ
/

create sequence FILE_ID_SEQ
/

create table L_COLLECTION_SLIP_TYPES
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A'
)
/

create table COLLECTION_SLIPS
(
	ID NUMBER not null
		primary key,
	FORM_NO VARCHAR2(100),
	COLLECTION_DATE DATE,
	COLLECTED_BY NUMBER,
	SLIP_TYPE_ID NUMBER
		constraint COLLECTION_SLIP_TYPES__FK
			references L_COLLECTION_SLIP_TYPES,
	LOCAL_VESSEL_ID NUMBER,
	PORT_DUES_AMOUNT FLOAT,
	RIVER_DUES_AMOUNT FLOAT,
	VAT_AMOUNT FLOAT,
	OTHER_DUES_TITLE VARCHAR2(100),
	OTHER_DUES_AMOUNT FLOAT,
	PERIOD_FROM DATE,
	PERIOD_TO DATE,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(5) default 'P' not null
)
/

create table L_CPA_VESSEL_TYPE
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A' not null
)
/

create table CPA_VESSELS
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	VESSEL_TYPE_ID NUMBER
		constraint CPA_VESSEL_TYPE_ID_FK
			references L_CPA_VESSEL_TYPE,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(5) default 'A' not null
)
/

create table LOCAL_VESSELS
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100) not null,
	CALL_SIGN VARCHAR2(200),
	FLAG VARCHAR2(200),
	GRT NUMBER,
	NRT NUMBER,
	LOA NUMBER,
	MAX_DRAUGHT FLOAT,
	TOTAL_CREW_OFFICER NUMBER,
	OWNER_NAME VARCHAR2(200),
	OWNER_ADDRESS VARCHAR2(400),
	STATUS VARCHAR2(5) default 'A' not null,
	REG_NO VARCHAR2(100),
	REG_EXP_DATE DATE,
	REG_ISSUED_BY NUMBER,
	REG_FILE VARCHAR2(200),
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	CREATED_AT DATE,
	UPDATED_AT DATE
)
/

create table SWING_MOORINGS
(
	ID NUMBER not null
		primary key,
	SERIAL_NO NUMBER,
	NAME VARCHAR2(100),
	DETAILS VARCHAR2(200),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATE_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A'
)
/

create table MOORING_VISITS
(
	ID NUMBER not null
		primary key,
	CPA_VESSEL_ID NUMBER
		constraint MV_CPA_VESSELS_ID_FK
			references CPA_VESSELS,
	LOCAL_VESSEL_ID NUMBER
		constraint MV_LOCAL_VESSELS_ID_FK
			references LOCAL_VESSELS,
	SWING_MOORING_ID NUMBER
		constraint MV_SWING_MOORINGS_ID_FK
			references SWING_MOORINGS,
	LM_REP VARCHAR2(100),
	VISIT_DATE DATE,
	SL_NO NUMBER,
	INSPECTOR_ID NUMBER,
	INSPECTOR_DATE DATE,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table L_TUG_TYPES
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table TUGS
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(200),
	TUG_TYPE_ID NUMBER
		constraint TUG_TYPES_ID_FK
			references L_TUG_TYPES,
	CAPACITY VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table VESSELS
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	STATUS VARCHAR2(10) default 'P'
)
/

create table PILOTS
(
	ID NUMBER not null
		constraint PILOTS_PK
			primary key,
	NAME VARCHAR2(100),
	STATUS VARCHAR2(10) default 'P'
)
/

create table L_VESSEL_CONDITIONS
(
	ID NUMBER not null
		constraint VESSEL_CONDITIONS_PK
			primary key,
	TITLE VARCHAR2(200),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A',
	VALUE_TYPE VARCHAR2(100) default 'RADIO'
)
/

create table L_VESSEL_WORKING_TYPES
(
	ID NUMBER not null
		constraint L_VESSEL_WORKING_TYPES_PK
			primary key,
	NAME VARCHAR2(100),
	DESCRIPTION VARCHAR2(200),
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	STATUS VARCHAR2(10) default 'A'
)
/

create table L_PILOTAGE_TYPES
(
	ID NUMBER not null
		constraint L_PILOTAGE_TYPES_PK
			primary key,
	NAME VARCHAR2(100),
	DESCRIPTION VARCHAR2(200),
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	STATUS VARCHAR2(10) default 'A'
)
/

create table L_PILOTAGE_SCHEDULE_TYPES
(
	ID NUMBER not null
		constraint L_PILOTAGE_SCHEDULE_TYPES_PK
			primary key,
	NAME VARCHAR2(100),
	DESCRIPTION VARCHAR2(200),
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	STATUS VARCHAR2(10) default 'A',
	START_TIME VARCHAR2(100),
	END_TIME VARCHAR2(100)
)
/

create table L_PILOTAGE_WORK_LOCATIONS
(
	ID NUMBER not null
		constraint L_PILOTAGE_WORK_LOCATIONS_PK
			primary key,
	NAME VARCHAR2(100),
	DESCRIPTION VARCHAR2(200),
	STATUS VARCHAR2(10) default 'A',
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER
)
/

create table PILOTAGES
(
	ID NUMBER not null
		primary key,
	VESSEL_ID NUMBER not null,
	VESSEL_REG_NO NUMBER not null,
	WORKING_TYPE_ID NUMBER not null
		constraint PV_WORKING_TYPES__FK
			references L_VESSEL_WORKING_TYPES,
	MOTHER_VESSEL_ID NUMBER,
	FILE_NO VARCHAR2(100),
	PILOT_ID NUMBER not null,
	PILOTAGE_TYPE_ID NUMBER not null
		constraint PILOTAGE_TYPES__FK
			references L_PILOTAGE_TYPES,
	SCHEDULE_TYPE_ID NUMBER not null
		constraint PILOTAGE_SCHEDULE_TYPES__FK
			references L_PILOTAGE_SCHEDULE_TYPES,
	LOCAL_AGENT VARCHAR2(200),
	LAST_PORT VARCHAR2(200),
	NEXT_PORT VARCHAR2(200),
	PILOT_BORDED_AT DATE,
	PILOT_LEFT_AT DATE,
	PILOTAGE_FROM_TIME DATE,
	PILOTAGE_TO_TIME DATE,
	MOORING_FROM_TIME DATE,
	MOORING_TO_TIME DATE,
	MOORING_LINE_FORD NUMBER,
	MOORING_LINE_AFT NUMBER,
	WORK_LOCATION_ID NUMBER not null
		constraint PILOTAGE_WORK_LOCATIONS__FK
			references L_PILOTAGE_WORK_LOCATIONS,
	SHIFTED_FROM VARCHAR2(200),
	SHIFTED_TO VARCHAR2(200),
	STERN_POWER_AVAIL VARCHAR2(100),
	MASTER_SIGN_DATE DATE,
	REMARKS VARCHAR2(200),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table PILOTAGE_TUGS
(
	ID NUMBER not null
		primary key,
	TUG_ID NUMBER
		constraint PILOTAGE_TUGS_TUGS_ID_FK
			references TUGS,
	PILOTAGE_ID NUMBER
		constraint PILOTAGE_TUGS_PILOTAGES_ID_FK
			references PILOTAGES,
	ASSITANCE_FROM_TIME DATE,
	ASSITANCE_TO_TIME DATE,
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A'
)
/

create table PILOTAGE_VESSEL_CONDITIONS
(
	ID NUMBER not null
		constraint PILOTAGE_VESSEL_CONDOTIONS_PK
			primary key,
	PILOTAGE_ID NUMBER
		constraint PVC_PILOTAGES_ID_FK
			references PILOTAGES,
	VESSEL_CONDITION_ID NUMBER
		constraint PVC_CONDITIONS_ID_FK
			references L_VESSEL_CONDITIONS,
	ANS_VALUE VARCHAR2(200),
	STATUS VARCHAR2(10) default 'A',
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER
)
/

create table CONFIG_STATUS
(
	ID NUMBER,
	TAG VARCHAR2(100),
	TITLE VARCHAR2(200),
	OPERATION VARCHAR2(200)
)
/

create table JETTY
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table CARGO
(
	ID NUMBER not null
		primary key,
	NAME VARCHAR2(100),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'P'
)
/

create table BERTHING_SCHEDULE
(
	ID NUMBER not null
		constraint BERTHING_SCHEDULE_PK
			primary key,
	VESSEL_ID NUMBER,
	JETTY_ID NUMBER,
	CURGO_ID NUMBER,
	ARIVAL_AT DATE,
	BERTHING_AT DATE,
	SHIFTING_AT DATE,
	LEAVING_AT DATE,
	IMPORT_DISCH NUMBER,
	B_ON_BOARD NUMBER,
	EXP_LEFTED VARCHAR2(10),
	T_ON_BOARD NUMBER,
	LOCAL_AGENT VARCHAR2(20),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10)
)
/

create table OPTION_CONFIG
(
	ID NUMBER not null
		primary key,
	OPTION_NAME VARCHAR2(200),
	OPTION_VALUE VARCHAR2(200),
	DESCRIPTION VARCHAR2(200),
	CREATED_AT DATE,
	UPDATED_AT DATE,
	CREATED_BY NUMBER,
	UPDATED_BY NUMBER,
	STATUS VARCHAR2(10) default 'A'
)
/

create view FOREIGN_VESSELS as
SELECT REG_NO AS ID, REG_NO, VESSEL_NAME AS NAME, SHIPPING_AGENT_NAME, STATUS_CODE AS STATUS, 
       MASTER_NAME,ARRIVAL_DATE,PORT_LIMIT,ANCORAGE_AREA,GRT,NRT,DECK_CARGO,
       LAST_PORT_NAME,NEXT_PORT_NAME,PORT_LIMIT_CORSSING_TIME,VESSEL_IMO,VESSEL_MMSI,VESSEL_CALL_SIGN,
       VESSEL_LENGTH
FROM VTMIS.VESSEL_REGISTRATION
WHERE VESSEL_TYPE_ID = 1
/

create view CPA_PILOTS as
SELECT E.EMP_ID ID, E.EMP_NAME NAME, E.EMP_CODE,
       DECODE(E.EMP_ACTIVE_YN, 'Y', 'A', 'I') STATUS, E.DESIGNATION_ID, LD.DESIGNATION
FROM PMIS.EMPLOYEE E, PMIS.L_DESIGNATION LD
WHERE E.DPT_DEPARTMENT_ID = 1
  AND E.EMP_STATUS_ID = 1
  AND E.EMP_TYPE_ID = 1
  AND  LD.DESIGNATION_ID=E.DESIGNATION_ID
  AND E.DESIGNATION_ID IN(513, 523)
/

create view CPA_CARGO as
SELECT ID, NAME, STATUS
FROM CARGO
/

create view AGENCY_INFO as
SELECT AGENCY_ID          ID,
       AGENCY_NAME        NAME,
       AGENCY_NAME_BN     NAME_BN,
       ADDRESS                 ADDRESS,
       GEO_DIVISION_ID,
       GEO_DISTRICT_ID,
       GEO_THANA_ID,
       MOBILE_NO,
       CONTACT_PERSON
       EMAIL,
       INSERT_BY CRTEATED_BY,
       INSERT_DATE CREATED_AT,
       UPDATE_BY,
       UPDATE_DATE UPDATED_AT
FROM SECDBMS.L_AGENCY
/

create view AREA_INFO as
SELECT A.DELIVERY_AREA_ID ID, A.DELIVERY_AREA NAME, A.DELIVERY_AREA_BN NAME_BN, A.ACTIVE_YN STATUS,
       T.DELIVERY_AREA_TYPE_ID TYPE_ID, T.DELIVERY_AREA_TYPE TYPE_NAME
FROM EWB.L_W_DELIVERY_AREA A, EWB.L_W_DELIVERY_AREA_TYPE T
WHERE A.DELIVERY_AREA_TYPE_ID = T.DELIVERY_AREA_TYPE_ID
/

create PACKAGE MDA_CORE_FUNC
AS
   FUNCTION GENERATE_ID RETURN NUMBER;

END MDA_CORE_FUNC;
/

create PACKAGE BODY MDA_CORE_FUNC
AS
 FUNCTION GENERATE_ID
      RETURN NUMBER
   IS
      SEQ_NUM      VARCHAR2 (6);
      YEAR_PART    VARCHAR2 (2) := TO_CHAR (SYSDATE, 'YY');
      MONTH_PART   VARCHAR2 (2) := LPAD (TO_CHAR (SYSDATE, 'MM'), 2, '0');
      DAY_PART     VARCHAR2 (2) := LPAD (TO_CHAR (SYSDATE, 'DD'), 2, '0');
      HOUR_PART    VARCHAR2 (2) := LPAD (TO_CHAR (SYSDATE, 'HH24'), 2, '0');
      SALT_PART    VARCHAR2 (3)
                      := LPAD (FLOOR (DBMS_RANDOM.VALUE * 10), 3, '0');
   BEGIN
      SELECT LPAD (ID_SEQ.NEXTVAL, 6, '0') INTO SEQ_NUM FROM DUAL;

      RETURN TO_NUMBER (YEAR_PART||MONTH_PART||DAY_PART||HOUR_PART ||SALT_PART|| SEQ_NUM);
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END GENERATE_ID;
END MDA_CORE_FUNC;
/

create PACKAGE     MDA_CORE_PROCE
AS
   PROCEDURE COLLECTION_SLIP_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_COLLECTION_SLIP_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_COLLECTION_SLIP_TYPES.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_COLLECTION_SLIP_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_COLLECTION_SLIP_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_COLLECTION_SLIP_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);

   PROCEDURE CPA_VESSEL_TYPE_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_CPA_VESSEL_TYPE.ID%TYPE,
      P_NAME             IN     MDA.L_CPA_VESSEL_TYPE.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_CPA_VESSEL_TYPE.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_CPA_VESSEL_TYPE.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_CPA_VESSEL_TYPE.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE PILOTAGE_SCHEDULE_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_SCHEDULE_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.STATUS%TYPE,
      P_START_TIME       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.START_TIME%TYPE,
      P_END_TIME         IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.END_TIME%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);

   PROCEDURE PILOTAGE_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);

   PROCEDURE PILOTAGE_WORK_LOCATIONS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_WORK_LOCATIONS.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_WORK_LOCATIONS.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_WORK_LOCATIONS.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_WORK_LOCATIONS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_WORK_LOCATIONS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_WORK_LOCATIONS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);

   PROCEDURE TUG_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_TUG_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_TUG_TYPES.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_TUG_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_TUG_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_TUG_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE VESSEL_CONDITIONS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_VESSEL_CONDITIONS.ID%TYPE,
      P_TITLE            IN     MDA.L_VESSEL_CONDITIONS.TITLE%TYPE,
      P_CREATED_BY       IN     MDA.L_VESSEL_CONDITIONS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_VESSEL_CONDITIONS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_VESSEL_CONDITIONS.STATUS%TYPE,
      P_VALUE_TYPE       IN     MDA.L_VESSEL_CONDITIONS.VALUE_TYPE%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE VESSEL_WORKING_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_VESSEL_WORKING_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_VESSEL_WORKING_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_VESSEL_WORKING_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_VESSEL_WORKING_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_VESSEL_WORKING_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_VESSEL_WORKING_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);

   PROCEDURE CPA_VESSELS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.CPA_VESSELS.ID%TYPE,
      P_NAME             IN     MDA.CPA_VESSELS.NAME%TYPE,
      P_VESSEL_TYPE_ID   IN     MDA.CPA_VESSELS.VESSEL_TYPE_ID%TYPE,
      P_CREATED_BY       IN     MDA.CPA_VESSELS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.CPA_VESSELS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.CPA_VESSELS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE LOCAL_VESSELS_CUD (
      P_ACTION_TYPE          IN     VARCHAR2,
      P_ID                   IN OUT MDA.LOCAL_VESSELS.ID%TYPE,
      P_NAME                 IN     MDA.LOCAL_VESSELS.NAME%TYPE,
      P_CALL_SIGN            IN     MDA.LOCAL_VESSELS.CALL_SIGN%TYPE,
      P_FLAG                 IN     MDA.LOCAL_VESSELS.FLAG%TYPE,
      P_GRT                  IN     MDA.LOCAL_VESSELS.GRT%TYPE,
      P_NRT                  IN     MDA.LOCAL_VESSELS.NRT%TYPE,
      P_LOA                  IN     MDA.LOCAL_VESSELS.LOA%TYPE,
      P_MAX_DRAUGHT          IN     MDA.LOCAL_VESSELS.MAX_DRAUGHT%TYPE,
      P_TOTAL_CREW_OFFICER   IN     MDA.LOCAL_VESSELS.TOTAL_CREW_OFFICER%TYPE,
      P_OWNER_NAME           IN     MDA.LOCAL_VESSELS.OWNER_NAME%TYPE,
      P_OWNER_ADDRESS        IN     MDA.LOCAL_VESSELS.OWNER_ADDRESS%TYPE,
      P_STATUS               IN     MDA.LOCAL_VESSELS.STATUS%TYPE,
      P_REG_NO               IN     MDA.LOCAL_VESSELS.REG_NO%TYPE,
      P_REG_EXP_DATE         IN     MDA.LOCAL_VESSELS.REG_EXP_DATE%TYPE,
      P_REG_ISSUED_BY        IN     MDA.LOCAL_VESSELS.REG_ISSUED_BY%TYPE,
      P_REG_FILE             IN     MDA.LOCAL_VESSELS.REG_FILE%TYPE,
      P_CREATED_BY           IN     MDA.LOCAL_VESSELS.CREATED_BY%TYPE,
      P_UPDATED_BY           IN     MDA.LOCAL_VESSELS.UPDATED_BY%TYPE,
      O_STATUS_CODE             OUT NUMBER,
      O_STATUS_MESSAGE          OUT VARCHAR2);


   PROCEDURE SWING_MOORINGS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.SWING_MOORINGS.ID%TYPE,
      P_SERIAL_NO        IN     MDA.SWING_MOORINGS.SERIAL_NO%TYPE,
      P_NAME             IN     MDA.SWING_MOORINGS.NAME%TYPE,
      P_DETAILS          IN     MDA.SWING_MOORINGS.DETAILS%TYPE,
      P_USER_ID          IN     MDA.SWING_MOORINGS.CREATE_BY%TYPE,
      P_STATUS           IN     MDA.SWING_MOORINGS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE TUGS_CUD (P_ACTION_TYPE      IN     VARCHAR2,
                       P_ID               IN OUT MDA.TUGS.ID%TYPE,
                       P_NAME             IN     MDA.TUGS.NAME%TYPE,
                       P_TUG_TYPE_ID      IN     MDA.TUGS.TUG_TYPE_ID%TYPE,
                       P_CAPACITY         IN     MDA.TUGS.CAPACITY%TYPE,
                       P_CREATED_BY       IN     MDA.TUGS.CREATED_BY%TYPE,
                       P_UPDATED_BY       IN     MDA.TUGS.UPDATED_BY%TYPE,
                       P_STATUS           IN     MDA.TUGS.STATUS%TYPE,
                       O_STATUS_CODE         OUT NUMBER,
                       O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE MOORING_VISITS_CUD (
      P_ACTION_TYPE        IN     VARCHAR2,
      P_ID                 IN OUT MDA.MOORING_VISITS.ID%TYPE,
      P_CPA_VESSEL_ID      IN     MDA.MOORING_VISITS.CPA_VESSEL_ID%TYPE,
      P_LOCAL_VESSEL_ID    IN     MDA.MOORING_VISITS.LOCAL_VESSEL_ID%TYPE,
      P_SWING_MOORING_ID   IN     MDA.MOORING_VISITS.SWING_MOORING_ID%TYPE,
      P_LM_REP             IN     MDA.MOORING_VISITS.LM_REP%TYPE,
      P_VISIT_DATE         IN     MDA.MOORING_VISITS.VISIT_DATE%TYPE,
      P_SL_NO              IN     MDA.MOORING_VISITS.SL_NO%TYPE,
      P_USER_ID            IN     MDA.MOORING_VISITS.CREATED_BY%TYPE,
      P_STATUS             IN     MDA.MOORING_VISITS.STATUS%TYPE,
      O_STATUS_CODE           OUT NUMBER,
      O_STATUS_MESSAGE        OUT VARCHAR2);


   PROCEDURE MOORING_VISITS_VERIFY_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.MOORING_VISITS.ID%TYPE,
      P_INSPECTOR_ID     IN     MDA.MOORING_VISITS.INSPECTOR_ID%TYPE,
      P_INSPECTOR_DATE   IN     MDA.MOORING_VISITS.INSPECTOR_DATE%TYPE,
      P_UPDATED_BY       IN     MDA.MOORING_VISITS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.MOORING_VISITS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE PILOTAGE_VESSEL_CONDITIONS_CUD (
      P_ACTION_TYPE           IN     VARCHAR2,
      P_ID                    IN OUT MDA.PILOTAGE_VESSEL_CONDITIONS.ID%TYPE,
      P_PILOTAGE_ID           IN     MDA.PILOTAGE_VESSEL_CONDITIONS.PILOTAGE_ID%TYPE,
      P_VESSEL_CONDITION_ID   IN     MDA.PILOTAGE_VESSEL_CONDITIONS.VESSEL_CONDITION_ID%TYPE,
      P_ANS_VALUE             IN     MDA.PILOTAGE_VESSEL_CONDITIONS.ANS_VALUE%TYPE,
      P_STATUS                IN     MDA.PILOTAGE_VESSEL_CONDITIONS.STATUS%TYPE,
      P_USER_ID               IN     NUMBER,
      O_STATUS_CODE              OUT NUMBER,
      O_STATUS_MESSAGE           OUT VARCHAR2);


   PROCEDURE PILOTAGES_CUD (
      P_ACTION_TYPE          IN     VARCHAR2,
      P_ID                   IN OUT MDA.PILOTAGES.ID%TYPE,
      P_VESSEL_ID            IN     MDA.PILOTAGES.VESSEL_ID%TYPE,
      P_VESSEL_REG_NO        IN     MDA.PILOTAGES.VESSEL_REG_NO%TYPE,
      P_WORKING_TYPE_ID      IN     MDA.PILOTAGES.WORKING_TYPE_ID%TYPE,
      P_MOTHER_VESSEL_ID     IN     MDA.PILOTAGES.MOTHER_VESSEL_ID%TYPE,
      P_FILE_NO              IN     MDA.PILOTAGES.FILE_NO%TYPE,
      P_PILOT_ID             IN     MDA.PILOTAGES.PILOT_ID%TYPE,
      P_PILOTAGE_TYPE_ID     IN     MDA.PILOTAGES.PILOTAGE_TYPE_ID%TYPE,
      P_SCHEDULE_TYPE_ID     IN     MDA.PILOTAGES.SCHEDULE_TYPE_ID%TYPE,
      P_LOCAL_AGENT          IN     MDA.PILOTAGES.LOCAL_AGENT%TYPE,
      P_LAST_PORT            IN     MDA.PILOTAGES.LAST_PORT%TYPE,
      P_NEXT_PORT            IN     MDA.PILOTAGES.NEXT_PORT%TYPE,
      P_PILOT_BORDED_AT      IN     MDA.PILOTAGES.PILOT_BORDED_AT%TYPE,
      P_PILOT_LEFT_AT        IN     MDA.PILOTAGES.PILOT_LEFT_AT%TYPE,
      P_PILOTAGE_FROM_TIME   IN     MDA.PILOTAGES.PILOTAGE_FROM_TIME%TYPE,
      P_PILOTAGE_TO_TIME     IN     MDA.PILOTAGES.PILOTAGE_TO_TIME%TYPE,
      P_MOORING_FROM_TIME    IN     MDA.PILOTAGES.MOORING_FROM_TIME%TYPE,
      P_MOORING_TO_TIME      IN     MDA.PILOTAGES.MOORING_TO_TIME%TYPE,
      P_MOORING_LINE_FORD    IN     MDA.PILOTAGES.MOORING_LINE_FORD%TYPE,
      P_MOORING_LINE_AFT     IN     MDA.PILOTAGES.MOORING_LINE_AFT%TYPE,
      P_WORK_LOCATION_ID     IN     MDA.PILOTAGES.WORK_LOCATION_ID%TYPE,
      P_SHIFTED_FROM         IN     MDA.PILOTAGES.SHIFTED_FROM%TYPE,
      P_SHIFTED_TO           IN     MDA.PILOTAGES.SHIFTED_TO%TYPE,
      P_STERN_POWER_AVAIL    IN     MDA.PILOTAGES.STERN_POWER_AVAIL%TYPE,
      P_MASTER_SIGN_DATE     IN     MDA.PILOTAGES.MASTER_SIGN_DATE%TYPE,
      P_REMARKS              IN     MDA.PILOTAGES.REMARKS%TYPE,
      P_STATUS               IN     MDA.PILOTAGES.STATUS%TYPE,
      P_USER_ID              IN     NUMBER,
      O_STATUS_CODE             OUT NUMBER,
      O_STATUS_MESSAGE          OUT VARCHAR2);


   PROCEDURE COLLECTION_SLIPS_CUD (
      P_ACTION_TYPE         IN     VARCHAR2,
      P_ID                  IN OUT MDA.COLLECTION_SLIPS.ID%TYPE,
      P_FORM_NO             IN     MDA.COLLECTION_SLIPS.FORM_NO%TYPE,
      P_COLLECTION_DATE     IN     MDA.COLLECTION_SLIPS.COLLECTION_DATE%TYPE,
      P_COLLECTED_BY        IN     MDA.COLLECTION_SLIPS.COLLECTED_BY%TYPE,
      P_SLIP_TYPE_ID        IN     MDA.COLLECTION_SLIPS.SLIP_TYPE_ID%TYPE,
      P_LOCAL_VESSEL_ID     IN     MDA.COLLECTION_SLIPS.LOCAL_VESSEL_ID%TYPE,
      P_PORT_DUES_AMOUNT    IN     MDA.COLLECTION_SLIPS.PORT_DUES_AMOUNT%TYPE,
      P_RIVER_DUES_AMOUNT   IN     MDA.COLLECTION_SLIPS.RIVER_DUES_AMOUNT%TYPE,
      P_VAT_AMOUNT          IN     MDA.COLLECTION_SLIPS.VAT_AMOUNT%TYPE,
      P_OTHER_DUES_TITLE    IN     MDA.COLLECTION_SLIPS.OTHER_DUES_TITLE%TYPE,
      P_OTHER_DUES_AMOUNT   IN     MDA.COLLECTION_SLIPS.OTHER_DUES_AMOUNT%TYPE,
      P_PERIOD_FROM         IN     MDA.COLLECTION_SLIPS.PERIOD_FROM%TYPE,
      P_PERIOD_TO           IN     MDA.COLLECTION_SLIPS.PERIOD_TO%TYPE,
      P_STATUS              IN     MDA.COLLECTION_SLIPS.STATUS%TYPE,
      P_USER_ID             IN     NUMBER,
      O_STATUS_CODE            OUT NUMBER,
      O_STATUS_MESSAGE         OUT VARCHAR2);


   PROCEDURE PILOTAGE_TUGS_CUD (
      P_ACTION_TYPE           IN     VARCHAR2,
      P_ID                    IN OUT MDA.PILOTAGE_TUGS.ID%TYPE,
      P_TUG_ID                IN     MDA.PILOTAGE_TUGS.TUG_ID%TYPE,
      P_PILOTAGE_ID           IN     MDA.PILOTAGE_TUGS.PILOTAGE_ID%TYPE,
      P_ASSITANCE_FROM_TIME   IN     MDA.PILOTAGE_TUGS.ASSITANCE_FROM_TIME%TYPE,
      P_ASSITANCE_TO_TIME     IN     MDA.PILOTAGE_TUGS.ASSITANCE_TO_TIME%TYPE,
      P_STATUS                IN     MDA.PILOTAGE_TUGS.STATUS%TYPE,
      P_USER_ID               IN     NUMBER,
      O_STATUS_CODE              OUT NUMBER,
      O_STATUS_MESSAGE           OUT VARCHAR2);


   PROCEDURE PILOTAGES_APPROVAL_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.PILOTAGES.ID%TYPE,
      P_STATUS           IN     MDA.PILOTAGES.STATUS%TYPE,
      P_USER_ID          IN     NUMBER,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);


   PROCEDURE BERTHING_SCHEDULE_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.BERTHING_SCHEDULE.ID%TYPE,
      P_VESSEL_ID        IN     MDA.BERTHING_SCHEDULE.VESSEL_ID%TYPE,
      P_JETTY_ID         IN     MDA.BERTHING_SCHEDULE.JETTY_ID%TYPE,
      P_CURGO_ID         IN     MDA.BERTHING_SCHEDULE.CURGO_ID%TYPE,
      P_ARIVAL_AT        IN     MDA.BERTHING_SCHEDULE.ARIVAL_AT%TYPE,
      P_BERTHING_AT      IN     MDA.BERTHING_SCHEDULE.BERTHING_AT%TYPE,
      P_SHIFTING_AT      IN     MDA.BERTHING_SCHEDULE.SHIFTING_AT%TYPE,
      P_LEAVING_AT       IN     MDA.BERTHING_SCHEDULE.LEAVING_AT%TYPE,
      P_IMPORT_DISCH     IN     MDA.BERTHING_SCHEDULE.IMPORT_DISCH%TYPE,
      P_B_ON_BOARD       IN     MDA.BERTHING_SCHEDULE.B_ON_BOARD%TYPE,
      P_EXP_LEFTED       IN     MDA.BERTHING_SCHEDULE.EXP_LEFTED%TYPE,
      P_T_ON_BOARD       IN     MDA.BERTHING_SCHEDULE.T_ON_BOARD%TYPE,
      P_LOCAL_AGENT      IN     MDA.BERTHING_SCHEDULE.LOCAL_AGENT%TYPE,
      P_STATUS           IN     MDA.BERTHING_SCHEDULE.STATUS%TYPE,
      P_USER_ID          IN     NUMBER,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2);
END MDA_CORE_PROCE;
/

create PACKAGE BODY     MDA_CORE_PROCE
AS
   PROCEDURE COLLECTION_SLIP_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_COLLECTION_SLIP_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_COLLECTION_SLIP_TYPES.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_COLLECTION_SLIP_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_COLLECTION_SLIP_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_COLLECTION_SLIP_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_COLLECTION_SLIP_TYPES lcst
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS SLIP TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_COLLECTION_SLIP_TYPES (ID,
                                                 NAME,
                                                 STATUS,
                                                 CREATED_AT,
                                                 CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SLIP TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_COLLECTION_SLIP_TYPES lcst
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS SLIP TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_COLLECTION_SLIP_TYPES
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SLIP TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_COLLECTION_SLIP_TYPES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SLIP TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END COLLECTION_SLIP_TYPES_CUD;



   PROCEDURE CPA_VESSEL_TYPE_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_CPA_VESSEL_TYPE.ID%TYPE,
      P_NAME             IN     MDA.L_CPA_VESSEL_TYPE.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_CPA_VESSEL_TYPE.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_CPA_VESSEL_TYPE.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_CPA_VESSEL_TYPE.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_CPA_VESSEL_TYPE lcvt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS CPA VESSEL TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_CPA_VESSEL_TYPE (ID,
                                           NAME,
                                           STATUS,
                                           CREATED_AT,
                                           CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CPA VESSEL TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_CPA_VESSEL_TYPE lcvt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS CPA VESSEL TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_CPA_VESSEL_TYPE
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CPA VESSEL TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_CPA_VESSEL_TYPE
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CPA VESSEL TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END CPA_VESSEL_TYPE_CUD;



   PROCEDURE PILOTAGE_SCHEDULE_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_SCHEDULE_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.STATUS%TYPE,
      P_START_TIME       IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.START_TIME%TYPE,
      P_END_TIME         IN     MDA.L_PILOTAGE_SCHEDULE_TYPES.END_TIME%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_SCHEDULE_TYPES lpst
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE SCHEDULE TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_PILOTAGE_SCHEDULE_TYPES (ID,
                                                   NAME,
                                                   DESCRIPTION,
                                                   STATUS,
                                                   START_TIME,
                                                   END_TIME,
                                                   CREATED_AT,
                                                   CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_DESCRIPTION,
                         P_STATUS,
                         TO_CHAR (P_START_TIME),
                         TO_CHAR (P_END_TIME),
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE SCHEDULE TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_SCHEDULE_TYPES lpst
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE SCHEDULE TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_SCHEDULE_TYPES
               SET NAME = UPPER (P_NAME),
                   DESCRIPTION = P_DESCRIPTION,
                   STATUS = P_STATUS,
                   START_TIME = TO_CHAR (P_START_TIME),
                   END_TIME = TO_CHAR (P_END_TIME),
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE SCHEDULE TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_SCHEDULE_TYPES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE SCHEDULE TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGE_SCHEDULE_TYPES_CUD;



   PROCEDURE PILOTAGE_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_TYPES lpt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_PILOTAGE_TYPES (ID,
                                          NAME,
                                          DESCRIPTION,
                                          STATUS,
                                          CREATED_AT,
                                          CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_DESCRIPTION,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_TYPES lpt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_TYPES
               SET NAME = UPPER (P_NAME),
                   DESCRIPTION = P_DESCRIPTION,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_TYPES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGE_TYPES_CUD;



   PROCEDURE PILOTAGE_WORK_LOCATIONS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_PILOTAGE_WORK_LOCATIONS.ID%TYPE,
      P_NAME             IN     MDA.L_PILOTAGE_WORK_LOCATIONS.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_PILOTAGE_WORK_LOCATIONS.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_PILOTAGE_WORK_LOCATIONS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_PILOTAGE_WORK_LOCATIONS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_PILOTAGE_WORK_LOCATIONS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_WORK_LOCATIONS lpwlt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE WORK LOCATION ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_PILOTAGE_WORK_LOCATIONS (ID,
                                                   NAME,
                                                   DESCRIPTION,
                                                   STATUS,
                                                   CREATED_AT,
                                                   CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_DESCRIPTION,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE WORK LOCATION CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_PILOTAGE_WORK_LOCATIONS lpwlt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE WORK LOCATION ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_WORK_LOCATIONS
               SET NAME = UPPER (P_NAME),
                   DESCRIPTION = P_DESCRIPTION,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE WORK LOCATION UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_PILOTAGE_WORK_LOCATIONS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE WORK LOCATION DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGE_WORK_LOCATIONS_CUD;



   PROCEDURE TUG_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_TUG_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_TUG_TYPES.NAME%TYPE,
      P_CREATED_BY       IN     MDA.L_TUG_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_TUG_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_TUG_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_TUG_TYPES ltt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS TUG TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_TUG_TYPES (ID,
                                     NAME,
                                     STATUS,
                                     CREATED_AT,
                                     CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_TUG_TYPES ltt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS TUG TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_TUG_TYPES
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_TUG_TYPES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END TUG_TYPES_CUD;



   PROCEDURE VESSEL_CONDITIONS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_VESSEL_CONDITIONS.ID%TYPE,
      P_TITLE            IN     MDA.L_VESSEL_CONDITIONS.TITLE%TYPE,
      P_CREATED_BY       IN     MDA.L_VESSEL_CONDITIONS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_VESSEL_CONDITIONS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_VESSEL_CONDITIONS.STATUS%TYPE,
      P_VALUE_TYPE       IN     MDA.L_VESSEL_CONDITIONS.VALUE_TYPE%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_TITLE IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (TITLE)
           INTO V_EXIST_DATA
           FROM L_VESSEL_CONDITIONS lvc
          WHERE UPPER (TITLE) = UPPER (P_TITLE) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL CONDITION ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_VESSEL_CONDITIONS (ID,
                                             TITLE,
                                             VALUE_TYPE,
                                             STATUS,
                                             CREATED_AT,
                                             CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_TITLE),
                         P_VALUE_TYPE,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL CONDITION CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_TITLE IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (P_TITLE)
           INTO V_EXIST_DATA
           FROM L_VESSEL_CONDITIONS lvc
          WHERE     UPPER (TITLE) = UPPER (P_TITLE)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL CONDITION ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_VESSEL_CONDITIONS
               SET TITLE = UPPER (P_TITLE),
                   VALUE_TYPE = P_VALUE_TYPE,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL CONDITION UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_VESSEL_CONDITIONS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL CONDITION DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END VESSEL_CONDITIONS_CUD;



   PROCEDURE VESSEL_WORKING_TYPES_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.L_VESSEL_WORKING_TYPES.ID%TYPE,
      P_NAME             IN     MDA.L_VESSEL_WORKING_TYPES.NAME%TYPE,
      P_DESCRIPTION      IN     MDA.L_VESSEL_WORKING_TYPES.DESCRIPTION%TYPE,
      P_CREATED_BY       IN     MDA.L_VESSEL_WORKING_TYPES.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.L_VESSEL_WORKING_TYPES.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.L_VESSEL_WORKING_TYPES.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_VESSEL_WORKING_TYPES lvwt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL WORKING TYPE ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO L_VESSEL_WORKING_TYPES (ID,
                                                NAME,
                                                DESCRIPTION,
                                                STATUS,
                                                CREATED_AT,
                                                CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_DESCRIPTION,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL WORKING TYPE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM L_VESSEL_WORKING_TYPES lvwt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL WORKING TYPE ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE L_VESSEL_WORKING_TYPES
               SET NAME = UPPER (P_NAME),
                   DESCRIPTION = P_DESCRIPTION,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL WORKING TYPE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE L_VESSEL_WORKING_TYPES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL WORKING TYPE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END VESSEL_WORKING_TYPES_CUD;



   PROCEDURE CPA_VESSELS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.CPA_VESSELS.ID%TYPE,
      P_NAME             IN     MDA.CPA_VESSELS.NAME%TYPE,
      P_VESSEL_TYPE_ID   IN     MDA.CPA_VESSELS.VESSEL_TYPE_ID%TYPE,
      P_CREATED_BY       IN     MDA.CPA_VESSELS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.CPA_VESSELS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.CPA_VESSELS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID            NUMBER;
      V_EXIST_DATA        NUMBER;
      V_VESSEL_TYPE_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CPA_VESSELS CV
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL ALREADY EXIST');

            RETURN;
         END IF;

        <<VESSEL_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_TYPE_EXT
              FROM L_CPA_VESSEL_TYPE
             WHERE ID = P_VESSEL_TYPE_ID AND STATUS = 'A';

            IF V_VESSEL_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL TYPE NOT FOUND');
               RETURN;
         END VESSEL_TYPE_VALIDATION;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO CPA_VESSELS (ID,
                                     NAME,
                                     VESSEL_TYPE_ID,
                                     STATUS,
                                     CREATED_AT,
                                     CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_VESSEL_TYPE_ID,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CPA_VESSELS CV
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL ALREADY EXIST');

            RETURN;
         END IF;

        <<VESSEL_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_TYPE_EXT
              FROM L_CPA_VESSEL_TYPE
             WHERE ID = P_VESSEL_TYPE_ID AND STATUS = 'A';

            IF V_VESSEL_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL TYPE NOT FOUND');
               RETURN;
         END VESSEL_TYPE_VALIDATION;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE CPA_VESSELS
               SET NAME = UPPER (P_NAME),
                   VESSEL_TYPE_ID = P_VESSEL_TYPE_ID,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE CPA_VESSELS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END CPA_VESSELS_CUD;



   PROCEDURE LOCAL_VESSELS_CUD (
      P_ACTION_TYPE          IN     VARCHAR2,
      P_ID                   IN OUT MDA.LOCAL_VESSELS.ID%TYPE,
      P_NAME                 IN     MDA.LOCAL_VESSELS.NAME%TYPE,
      P_CALL_SIGN            IN     MDA.LOCAL_VESSELS.CALL_SIGN%TYPE,
      P_FLAG                 IN     MDA.LOCAL_VESSELS.FLAG%TYPE,
      P_GRT                  IN     MDA.LOCAL_VESSELS.GRT%TYPE,
      P_NRT                  IN     MDA.LOCAL_VESSELS.NRT%TYPE,
      P_LOA                  IN     MDA.LOCAL_VESSELS.LOA%TYPE,
      P_MAX_DRAUGHT          IN     MDA.LOCAL_VESSELS.MAX_DRAUGHT%TYPE,
      P_TOTAL_CREW_OFFICER   IN     MDA.LOCAL_VESSELS.TOTAL_CREW_OFFICER%TYPE,
      P_OWNER_NAME           IN     MDA.LOCAL_VESSELS.OWNER_NAME%TYPE,
      P_OWNER_ADDRESS        IN     MDA.LOCAL_VESSELS.OWNER_ADDRESS%TYPE,
      P_STATUS               IN     MDA.LOCAL_VESSELS.STATUS%TYPE,
      P_REG_NO               IN     MDA.LOCAL_VESSELS.REG_NO%TYPE,
      P_REG_EXP_DATE         IN     MDA.LOCAL_VESSELS.REG_EXP_DATE%TYPE,
      P_REG_ISSUED_BY        IN     MDA.LOCAL_VESSELS.REG_ISSUED_BY%TYPE,
      P_REG_FILE             IN     MDA.LOCAL_VESSELS.REG_FILE%TYPE,
      P_CREATED_BY           IN     MDA.LOCAL_VESSELS.CREATED_BY%TYPE,
      P_UPDATED_BY           IN     MDA.LOCAL_VESSELS.UPDATED_BY%TYPE,
      O_STATUS_CODE             OUT NUMBER,
      O_STATUS_MESSAGE          OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM LOCAL_VESSELS lv
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS LOCAL VESSELS ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO LOCAL_VESSELS (ID,
                                       NAME,
                                       CALL_SIGN,
                                       FLAG,
                                       GRT,
                                       NRT,
                                       LOA,
                                       MAX_DRAUGHT,
                                       TOTAL_CREW_OFFICER,
                                       OWNER_NAME,
                                       OWNER_ADDRESS,
                                       STATUS,
                                       REG_NO,
                                       REG_EXP_DATE,
                                       REG_ISSUED_BY,
                                       REG_FILE,
                                       CREATED_AT,
                                       CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_CALL_SIGN,
                         P_FLAG,
                         P_GRT,
                         P_NRT,
                         P_LOA,
                         P_MAX_DRAUGHT,
                         P_TOTAL_CREW_OFFICER,
                         P_OWNER_NAME,
                         P_OWNER_ADDRESS,
                         P_STATUS,
                         P_REG_NO,
                         P_REG_EXP_DATE,
                         P_REG_ISSUED_BY,
                         P_REG_FILE,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'LOCAL VESSELS CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM LOCAL_VESSELS lv
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS LOCAL VESSELS ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE LOCAL_VESSELS
               SET NAME = UPPER (P_NAME),
                   CALL_SIGN = P_CALL_SIGN,
                   FLAG = P_FLAG,
                   GRT = P_GRT,
                   NRT = P_NRT,
                   LOA = P_LOA,
                   MAX_DRAUGHT = P_MAX_DRAUGHT,
                   TOTAL_CREW_OFFICER = P_TOTAL_CREW_OFFICER,
                   OWNER_NAME = P_OWNER_NAME,
                   OWNER_ADDRESS = P_OWNER_ADDRESS,
                   STATUS = P_STATUS,
                   REG_NO = P_REG_NO,
                   REG_EXP_DATE = P_REG_EXP_DATE,
                   REG_ISSUED_BY = P_REG_ISSUED_BY,
                   REG_FILE = P_REG_FILE,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'LOCAL VESSELS UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE LOCAL_VESSELS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'LOCAL_VESSELS DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END LOCAL_VESSELS_CUD;



   PROCEDURE SWING_MOORINGS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.SWING_MOORINGS.ID%TYPE,
      P_SERIAL_NO        IN     MDA.SWING_MOORINGS.SERIAL_NO%TYPE,
      P_NAME             IN     MDA.SWING_MOORINGS.NAME%TYPE,
      P_DETAILS          IN     MDA.SWING_MOORINGS.DETAILS%TYPE,
      P_USER_ID          IN     MDA.SWING_MOORINGS.CREATE_BY%TYPE,
      P_STATUS           IN     MDA.SWING_MOORINGS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM SWING_MOORINGS sm
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS SWING MOORINGS ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO SWING_MOORINGS (ID,
                                        SERIAL_NO,
                                        NAME,
                                        DETAILS,
                                        STATUS,
                                        CREATED_AT,
                                        CREATE_BY)
                 VALUES (V_GEN_ID,
                         P_SERIAL_NO,
                         UPPER (P_NAME),
                         P_DETAILS,
                         P_STATUS,
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SWING MOORINGS CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM SWING_MOORINGS sm
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS SWING MOORINGS ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE SWING_MOORINGS
               SET SERIAL_NO = P_SERIAL_NO,
                   NAME = UPPER (P_NAME),
                   DETAILS = P_DETAILS,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SWING MOORINGS UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE SWING_MOORINGS
               SET STATUS = 'D', UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'SWING MOORINGS DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END SWING_MOORINGS_CUD;



   PROCEDURE TUGS_CUD (P_ACTION_TYPE      IN     VARCHAR2,
                       P_ID               IN OUT MDA.TUGS.ID%TYPE,
                       P_NAME             IN     MDA.TUGS.NAME%TYPE,
                       P_TUG_TYPE_ID      IN     MDA.TUGS.TUG_TYPE_ID%TYPE,
                       P_CAPACITY         IN     MDA.TUGS.CAPACITY%TYPE,
                       P_CREATED_BY       IN     MDA.TUGS.CREATED_BY%TYPE,
                       P_UPDATED_BY       IN     MDA.TUGS.UPDATED_BY%TYPE,
                       P_STATUS           IN     MDA.TUGS.STATUS%TYPE,
                       O_STATUS_CODE         OUT NUMBER,
                       O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID         NUMBER;
      V_EXIST_DATA     NUMBER;
      V_TUG_TYPE_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM TUGS t
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS TUG ALREADY EXIST');

            RETURN;
         END IF;

        <<TUG_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_TUG_TYPE_EXT
              FROM L_TUG_TYPES
             WHERE ID = P_TUG_TYPE_ID AND STATUS = 'A';

            IF V_TUG_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID TUG TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'TUG TYPE NOT FOUND');
               RETURN;
         END TUG_TYPE_VALIDATION;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO TUGS (ID,
                              NAME,
                              TUG_TYPE_ID,
                              CAPACITY,
                              STATUS,
                              CREATED_AT,
                              CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_TUG_TYPE_ID,
                         P_CAPACITY,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM TUGS t
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS TUG ALREADY EXIST');

            RETURN;
         END IF;

        <<TUG_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_TUG_TYPE_EXT
              FROM L_TUG_TYPES
             WHERE ID = P_TUG_TYPE_ID AND STATUS = 'A';

            IF V_TUG_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID TUG TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'TUG TYPE NOT FOUND');
               RETURN;
         END TUG_TYPE_VALIDATION;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE TUGS
               SET NAME = UPPER (P_NAME),
                   TUG_TYPE_ID = P_TUG_TYPE_ID,
                   CAPACITY = P_CAPACITY,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE TUGS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'TUG DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END TUGS_CUD;


   PROCEDURE MOORING_VISITS_CUD (
      P_ACTION_TYPE        IN     VARCHAR2,
      P_ID                 IN OUT MDA.MOORING_VISITS.ID%TYPE,
      P_CPA_VESSEL_ID      IN     MDA.MOORING_VISITS.CPA_VESSEL_ID%TYPE,
      P_LOCAL_VESSEL_ID    IN     MDA.MOORING_VISITS.LOCAL_VESSEL_ID%TYPE,
      P_SWING_MOORING_ID   IN     MDA.MOORING_VISITS.SWING_MOORING_ID%TYPE,
      P_LM_REP             IN     MDA.MOORING_VISITS.LM_REP%TYPE,
      P_VISIT_DATE         IN     MDA.MOORING_VISITS.VISIT_DATE%TYPE,
      P_SL_NO              IN     MDA.MOORING_VISITS.SL_NO%TYPE,
      P_USER_ID            IN     MDA.MOORING_VISITS.CREATED_BY%TYPE,
      P_STATUS             IN     MDA.MOORING_VISITS.STATUS%TYPE,
      O_STATUS_CODE           OUT NUMBER,
      O_STATUS_MESSAGE        OUT VARCHAR2)
   IS
      V_GEN_ID              NUMBER;
      V_EXIST_DATA          NUMBER;
      V_CPA_VESSEL_EXT      NUMBER;
      V_LOCAL_VESSEL_EXT    NUMBER;
      V_SWING_MOORING_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM MOORING_VISITS mv
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS MOORING VISIT ALREADY EXIST');

            RETURN;
         END IF;

        <<CPA_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_CPA_VESSEL_EXT
              FROM CPA_VESSELS
             WHERE ID = P_CPA_VESSEL_ID AND STATUS = 'A';

            IF V_CPA_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END CPA_VESSEL_VALIDATION;


        <<LOCAL_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_LOCAL_VESSEL_EXT
              FROM LOCAL_VESSELS
             WHERE ID = P_LOCAL_VESSEL_ID AND STATUS = 'A';

            IF V_LOCAL_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID LOCAL VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'LOCAL VESSEL NOT FOUND');
               RETURN;
         END LOCAL_VESSEL_VALIDATION;


        <<SWING_MOORING_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SWING_MOORING_EXT
              FROM SWING_MOORINGS
             WHERE ID = P_SWING_MOORING_ID AND STATUS = 'A';

            IF V_SWING_MOORING_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SWING MOORING');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SWING MOORING NOT FOUND');
               RETURN;
         END SWING_MOORING_VALIDATION;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO MOORING_VISITS (ID,
                                        CPA_VESSEL_ID,
                                        LOCAL_VESSEL_ID,
                                        SWING_MOORING_ID,
                                        LM_REP,
                                        VISIT_DATE,
                                        SL_NO,
                                        STATUS,
                                        CREATED_AT,
                                        CREATED_BY)
                 VALUES (V_GEN_ID,
                         P_CPA_VESSEL_ID,
                         P_LOCAL_VESSEL_ID,
                         P_SWING_MOORING_ID,
                         P_LM_REP,
                         P_VISIT_DATE,
                         P_SL_NO,
                         'P',
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'MOORING VISIT CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<CPA_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_CPA_VESSEL_EXT
              FROM CPA_VESSELS
             WHERE ID = P_CPA_VESSEL_ID AND STATUS = 'A';

            IF V_CPA_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END CPA_VESSEL_VALIDATION;


        <<LOCAL_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_LOCAL_VESSEL_EXT
              FROM LOCAL_VESSELS
             WHERE ID = P_LOCAL_VESSEL_ID AND STATUS = 'A';

            IF V_LOCAL_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID LOCAL VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'LOCAL VESSEL NOT FOUND');
               RETURN;
         END LOCAL_VESSEL_VALIDATION;


        <<SWING_MOORING_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SWING_MOORING_EXT
              FROM SWING_MOORINGS
             WHERE ID = P_SWING_MOORING_ID AND STATUS = 'A';

            IF V_SWING_MOORING_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SWING MOORING');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SWING MOORING NOT FOUND');
               RETURN;
         END SWING_MOORING_VALIDATION;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE MOORING_VISITS
               SET CPA_VESSEL_ID = P_CPA_VESSEL_ID,
                   LOCAL_VESSEL_ID = P_LOCAL_VESSEL_ID,
                   SWING_MOORING_ID = P_SWING_MOORING_ID,
                   LM_REP = P_LM_REP,
                   VISIT_DATE = P_VISIT_DATE,
                   SL_NO = P_SL_NO,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'MOORING VISIT UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE MOORING_VISITS
               SET STATUS = 'D', UPDATED_AT = SYSDATE, UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'MOORING VISIT DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END MOORING_VISITS_CUD;



   PROCEDURE MOORING_VISITS_VERIFY_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.MOORING_VISITS.ID%TYPE,
      P_INSPECTOR_ID     IN     MDA.MOORING_VISITS.INSPECTOR_ID%TYPE,
      P_INSPECTOR_DATE   IN     MDA.MOORING_VISITS.INSPECTOR_DATE%TYPE,
      P_UPDATED_BY       IN     MDA.MOORING_VISITS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.MOORING_VISITS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE MOORING_VISITS
               SET INSPECTOR_ID = P_INSPECTOR_ID,
                   INSPECTOR_DATE = P_INSPECTOR_DATE,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'MOORING VISIT UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE MOORING_VISITS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'MOORING VISIT DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END MOORING_VISITS_VERIFY_CUD;



   PROCEDURE PILOTAGE_VESSEL_CONDITIONS_CUD (
      P_ACTION_TYPE           IN     VARCHAR2,
      P_ID                    IN OUT MDA.PILOTAGE_VESSEL_CONDITIONS.ID%TYPE,
      P_PILOTAGE_ID           IN     MDA.PILOTAGE_VESSEL_CONDITIONS.PILOTAGE_ID%TYPE,
      P_VESSEL_CONDITION_ID   IN     MDA.PILOTAGE_VESSEL_CONDITIONS.VESSEL_CONDITION_ID%TYPE,
      P_ANS_VALUE             IN     MDA.PILOTAGE_VESSEL_CONDITIONS.ANS_VALUE%TYPE,
      P_STATUS                IN     MDA.PILOTAGE_VESSEL_CONDITIONS.STATUS%TYPE,
      P_USER_ID               IN     NUMBER,
      O_STATUS_CODE              OUT NUMBER,
      O_STATUS_MESSAGE           OUT VARCHAR2)
   IS
      V_GEN_ID                 NUMBER;
      V_EXIST_DATA             NUMBER;
      V_PILOTAGE_EXT           NUMBER;
      V_VESSEL_CONDITION_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM PILOTAGE_VESSEL_CONDITIONS pvc
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE VESSEL CONDITION ALREADY EXIST');

            RETURN;
         END IF;
		 
/*

        <<PILOTAGE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_EXT
              FROM PILOTAGES
             WHERE ID = P_PILOTAGE_ID AND STATUS = 'A';

            IF V_PILOTAGE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE NOT FOUND');
               RETURN;
         END PILOTAGE_VALIDATION;
		 
*/

        <<VESSEL_CONDITION_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_CONDITION_EXT
              FROM L_VESSEL_CONDITIONS
             WHERE ID = P_VESSEL_CONDITION_ID AND STATUS = 'A';

            IF V_VESSEL_CONDITION_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL CONDITION');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL CONDITION NOT FOUND');
               RETURN;
         END VESSEL_CONDITION_VALIDATION;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO PILOTAGE_VESSEL_CONDITIONS (ID,
                                                    PILOTAGE_ID,
                                                    VESSEL_CONDITION_ID,
                                                    ANS_VALUE,
                                                    STATUS,
                                                    CREATED_AT,
                                                    CREATED_BY)
                 VALUES (V_GEN_ID,
                         P_PILOTAGE_ID,
                         P_VESSEL_CONDITION_ID,
                         P_ANS_VALUE,
                         P_STATUS,
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE :=
               'PILOTAGE VESSEL CONDITION CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


        <<PILOTAGE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_EXT
              FROM PILOTAGES
             WHERE ID = P_PILOTAGE_ID AND STATUS = 'A';

            IF V_PILOTAGE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE NOT FOUND');
               RETURN;
         END PILOTAGE_VALIDATION;


        <<VESSEL_CONDITION_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_CONDITION_EXT
              FROM L_VESSEL_CONDITIONS
             WHERE ID = P_VESSEL_CONDITION_ID AND STATUS = 'A';

            IF V_VESSEL_CONDITION_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL CONDITION');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL CONDITION NOT FOUND');
               RETURN;
         END VESSEL_CONDITION_VALIDATION;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE PILOTAGE_VESSEL_CONDITIONS
               SET PILOTAGE_ID = P_PILOTAGE_ID,
                   VESSEL_CONDITION_ID = P_VESSEL_CONDITION_ID,
                   ANS_VALUE = P_ANS_VALUE,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE :=
               'PILOTAGE VESSEL CONDITION UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE PILOTAGE_VESSEL_CONDITIONS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE :=
               'PILOTAGE VESSEL CONDITION DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGE_VESSEL_CONDITIONS_CUD;



   PROCEDURE PILOTAGES_CUD (
      P_ACTION_TYPE          IN     VARCHAR2,
      P_ID                   IN OUT MDA.PILOTAGES.ID%TYPE,
      P_VESSEL_ID            IN     MDA.PILOTAGES.VESSEL_ID%TYPE,
      P_VESSEL_REG_NO        IN     MDA.PILOTAGES.VESSEL_REG_NO%TYPE,
      P_WORKING_TYPE_ID      IN     MDA.PILOTAGES.WORKING_TYPE_ID%TYPE,
      P_MOTHER_VESSEL_ID     IN     MDA.PILOTAGES.MOTHER_VESSEL_ID%TYPE,
      P_FILE_NO              IN     MDA.PILOTAGES.FILE_NO%TYPE,
      P_PILOT_ID             IN     MDA.PILOTAGES.PILOT_ID%TYPE,
      P_PILOTAGE_TYPE_ID     IN     MDA.PILOTAGES.PILOTAGE_TYPE_ID%TYPE,
      P_SCHEDULE_TYPE_ID     IN     MDA.PILOTAGES.SCHEDULE_TYPE_ID%TYPE,
      P_LOCAL_AGENT          IN     MDA.PILOTAGES.LOCAL_AGENT%TYPE,
      P_LAST_PORT            IN     MDA.PILOTAGES.LAST_PORT%TYPE,
      P_NEXT_PORT            IN     MDA.PILOTAGES.NEXT_PORT%TYPE,
      P_PILOT_BORDED_AT      IN     MDA.PILOTAGES.PILOT_BORDED_AT%TYPE,
      P_PILOT_LEFT_AT        IN     MDA.PILOTAGES.PILOT_LEFT_AT%TYPE,
      P_PILOTAGE_FROM_TIME   IN     MDA.PILOTAGES.PILOTAGE_FROM_TIME%TYPE,
      P_PILOTAGE_TO_TIME     IN     MDA.PILOTAGES.PILOTAGE_TO_TIME%TYPE,
      P_MOORING_FROM_TIME    IN     MDA.PILOTAGES.MOORING_FROM_TIME%TYPE,
      P_MOORING_TO_TIME      IN     MDA.PILOTAGES.MOORING_TO_TIME%TYPE,
      P_MOORING_LINE_FORD    IN     MDA.PILOTAGES.MOORING_LINE_FORD%TYPE,
      P_MOORING_LINE_AFT     IN     MDA.PILOTAGES.MOORING_LINE_AFT%TYPE,
      P_WORK_LOCATION_ID     IN     MDA.PILOTAGES.WORK_LOCATION_ID%TYPE,
      P_SHIFTED_FROM         IN     MDA.PILOTAGES.SHIFTED_FROM%TYPE,
      P_SHIFTED_TO           IN     MDA.PILOTAGES.SHIFTED_TO%TYPE,
      P_STERN_POWER_AVAIL    IN     MDA.PILOTAGES.STERN_POWER_AVAIL%TYPE,
      P_MASTER_SIGN_DATE     IN     MDA.PILOTAGES.MASTER_SIGN_DATE%TYPE,
      P_REMARKS              IN     MDA.PILOTAGES.REMARKS%TYPE,
      P_STATUS               IN     MDA.PILOTAGES.STATUS%TYPE,
      P_USER_ID              IN     NUMBER,
      O_STATUS_CODE             OUT NUMBER,
      O_STATUS_MESSAGE          OUT VARCHAR2)
   IS
      V_GEN_ID              NUMBER;
      V_EXIST_DATA          NUMBER;
      V_VESSEL_EXT          NUMBER;
      V_WORKING_TYPE_EXT    NUMBER;
      V_MOTHER_VESSEL_EXT   NUMBER;
      V_PILOT_EXT           NUMBER;
      V_PILOTAGE_TYPE_EXT   NUMBER;
      V_SCHEDULE_TYPE_EXT   NUMBER;
      V_WORK_LOCATION_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM PILOTAGES p
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE ALREADY EXIST');

            RETURN;
         END IF;

        <<VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_EXT
              FROM FOREIGN_VESSELS
             WHERE ID = P_VESSEL_ID AND STATUS = 'A';

            IF V_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END VESSEL_VALIDATION;


        <<WORKING_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_WORKING_TYPE_EXT
              FROM L_VESSEL_WORKING_TYPES
             WHERE ID = P_WORKING_TYPE_ID AND STATUS = 'A';

            IF V_WORKING_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID WORKING TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'WORKING TYPE NOT FOUND');
               RETURN;
         END WORKING_TYPE_VALIDATION;


         IF P_MOTHER_VESSEL_ID IS NOT NULL
         THEN
           <<MOTHER_VESSEL_VALIDATION>>
            BEGIN
               SELECT COUNT (ID)
                 INTO V_MOTHER_VESSEL_EXT
                 FROM FOREIGN_VESSELS
                WHERE ID = P_MOTHER_VESSEL_ID AND STATUS = 'A';

               IF V_MOTHER_VESSEL_EXT <> 1
               THEN
                  SET_ERROR (99, 'SORRY! INVALID MOTHER VESSEL');

                  RETURN;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  SET_ERROR (99, 'MOTHER VESSEL NOT FOUND');
                  RETURN;
            END MOTHER_VESSEL_VALIDATION;
         END IF;


        <<PILOT_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOT_EXT
              FROM CPA_PILOTS
             WHERE ID = P_PILOT_ID AND STATUS = 'A';

            IF V_PILOT_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOT');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOT NOT FOUND');
               RETURN;
         END PILOT_VALIDATION;



        <<PILOTAGE_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_TYPE_EXT
              FROM L_PILOTAGE_TYPES
             WHERE ID = P_PILOTAGE_TYPE_ID AND STATUS = 'A';

            IF V_PILOTAGE_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE TYPE NOT FOUND');
               RETURN;
         END PILOTAGE_TYPE_VALIDATION;



        <<SCHEDULE_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SCHEDULE_TYPE_EXT
              FROM L_PILOTAGE_SCHEDULE_TYPES
             WHERE ID = P_SCHEDULE_TYPE_ID AND STATUS = 'A';

            IF V_SCHEDULE_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SCHEDULE TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SCHEDULE TYPE NOT FOUND');
               RETURN;
         END SCHEDULE_TYPE_VALIDATION;


        <<WORK_LOCATION_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_WORK_LOCATION_EXT
              FROM L_PILOTAGE_WORK_LOCATIONS
             WHERE ID = P_WORK_LOCATION_ID AND STATUS = 'A';

            IF V_WORK_LOCATION_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID WORK LOCATION');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'WORK LOCATION NOT FOUND');
               RETURN;
         END WORK_LOCATION_VALIDATION;



         IF P_PILOT_BORDED_AT > P_PILOT_LEFT_AT
         THEN
            SET_ERROR (
               99,
               'SORRY! LEFT DATE SHOULD BE GREATER THAN BOARDED DATE');

            RETURN;
         END IF;


         IF P_PILOTAGE_FROM_TIME > P_PILOTAGE_TO_TIME
         THEN
            SET_ERROR (
               99,
               'SORRY! PILOTAGE TO TIME SHOULD BE GREATER THAN PILOTAGE FROM TIME');

            RETURN;
         END IF;

         IF P_MOORING_FROM_TIME > P_MOORING_TO_TIME
         THEN
            SET_ERROR (
               99,
               'SORRY! MOORING TO TIME SHOULD BE GREATER THAN MOORING FROM TIME');

            RETURN;
         END IF;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO PILOTAGES (ID,
                                   VESSEL_ID,
                                   VESSEL_REG_NO,
                                   WORKING_TYPE_ID,
                                   MOTHER_VESSEL_ID,
                                   FILE_NO,
                                   PILOT_ID,
                                   PILOTAGE_TYPE_ID,
                                   SCHEDULE_TYPE_ID,
                                   LOCAL_AGENT,
                                   LAST_PORT,
                                   NEXT_PORT,
                                   PILOT_BORDED_AT,
                                   PILOT_LEFT_AT,
                                   PILOTAGE_FROM_TIME,
                                   PILOTAGE_TO_TIME,
                                   MOORING_FROM_TIME,
                                   MOORING_TO_TIME,
                                   MOORING_LINE_FORD,
                                   MOORING_LINE_AFT,
                                   WORK_LOCATION_ID,
                                   SHIFTED_FROM,
                                   SHIFTED_TO,
                                   STERN_POWER_AVAIL,
                                   MASTER_SIGN_DATE,
                                   REMARKS,
                                   STATUS,
                                   CREATED_AT,
                                   CREATED_BY)
                    VALUES (
                              V_GEN_ID,
                              P_VESSEL_ID,
                              P_VESSEL_REG_NO,
                              P_WORKING_TYPE_ID,
                              P_MOTHER_VESSEL_ID,
                              P_FILE_NO,
                              P_PILOT_ID,
                              P_PILOTAGE_TYPE_ID,
                              P_SCHEDULE_TYPE_ID,
                              P_LOCAL_AGENT,
                              P_LAST_PORT,
                              P_NEXT_PORT,
                              TO_CHAR (P_PILOT_BORDED_AT,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              TO_CHAR (P_PILOT_LEFT_AT,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              TO_CHAR (P_PILOTAGE_FROM_TIME,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              TO_CHAR (P_PILOTAGE_TO_TIME,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              TO_CHAR (P_MOORING_FROM_TIME,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              TO_CHAR (P_MOORING_TO_TIME,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              P_MOORING_LINE_FORD,
                              P_MOORING_LINE_AFT,
                              P_WORK_LOCATION_ID,
                              P_SHIFTED_FROM,
                              P_SHIFTED_TO,
                              P_STERN_POWER_AVAIL,
                              TO_CHAR (P_MASTER_SIGN_DATE,
                                       'dd-Mon-yyyy hh24:mi:ss'),
                              P_REMARKS,
                              P_STATUS,
                              SYSDATE,
                              P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


        <<VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_EXT
              FROM FOREIGN_VESSELS
             WHERE ID = P_VESSEL_ID AND STATUS = 'A';

            IF V_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END VESSEL_VALIDATION;


        <<WORKING_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_WORKING_TYPE_EXT
              FROM L_VESSEL_WORKING_TYPES
             WHERE ID = P_WORKING_TYPE_ID AND STATUS = 'A';

            IF V_WORKING_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID WORKING TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'WORKING TYPE NOT FOUND');
               RETURN;
         END WORKING_TYPE_VALIDATION;


        <<MOTHER_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_MOTHER_VESSEL_EXT
              FROM CPA_VESSELS
             WHERE ID = P_MOTHER_VESSEL_ID AND STATUS = 'A';

            IF V_MOTHER_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID CPA VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'CPA VESSEL NOT FOUND');
               RETURN;
         END MOTHER_VESSEL_VALIDATION;


        <<PILOT_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOT_EXT
              FROM CPA_PILOTS
             WHERE ID = P_PILOT_ID AND STATUS = 'A';

            IF V_PILOT_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOT');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOT NOT FOUND');
               RETURN;
         END PILOT_VALIDATION;



        <<PILOTAGE_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_TYPE_EXT
              FROM L_PILOTAGE_TYPES
             WHERE ID = P_PILOTAGE_TYPE_ID AND STATUS = 'A';

            IF V_PILOTAGE_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE TYPE NOT FOUND');
               RETURN;
         END PILOTAGE_TYPE_VALIDATION;



        <<SCHEDULE_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SCHEDULE_TYPE_EXT
              FROM L_PILOTAGE_SCHEDULE_TYPES
             WHERE ID = P_SCHEDULE_TYPE_ID AND STATUS = 'A';

            IF V_SCHEDULE_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SCHEDULE TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SCHEDULE TYPE NOT FOUND');
               RETURN;
         END SCHEDULE_TYPE_VALIDATION;


        <<WORK_LOCATION_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_WORK_LOCATION_EXT
              FROM L_PILOTAGE_WORK_LOCATIONS
             WHERE ID = P_WORK_LOCATION_ID AND STATUS = 'A';

            IF V_WORK_LOCATION_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID WORK LOCATION');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'WORK LOCATION NOT FOUND');
               RETURN;
         END WORK_LOCATION_VALIDATION;



         IF P_PILOT_BORDED_AT > P_PILOT_LEFT_AT
         THEN
            SET_ERROR (
               99,
               'SORRY! LEFT DATE SHOULD BE GREATER THAN BOARDED DATE');

            RETURN;
         END IF;


         IF P_PILOTAGE_FROM_TIME > P_PILOTAGE_TO_TIME
         THEN
            SET_ERROR (
               99,
               'SORRY! PILOTAGE TO TIME SHOULD BE GREATER THAN PILOTAGE FROM TIME');

            RETURN;
         END IF;

         IF P_MOORING_FROM_TIME > P_MOORING_TO_TIME
         THEN
            SET_ERROR (
               99,
               'SORRY! MOORING TO TIME SHOULD BE GREATER THAN MOORING FROM TIME');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE PILOTAGES
               SET VESSEL_ID = P_VESSEL_ID,
                   VESSEL_REG_NO = P_VESSEL_REG_NO,
                   WORKING_TYPE_ID = P_WORKING_TYPE_ID,
                   MOTHER_VESSEL_ID = P_MOTHER_VESSEL_ID,
                   FILE_NO = P_FILE_NO,
                   PILOT_ID = P_PILOT_ID,
                   PILOTAGE_TYPE_ID = P_PILOTAGE_TYPE_ID,
                   SCHEDULE_TYPE_ID = P_SCHEDULE_TYPE_ID,
                   LOCAL_AGENT = P_LOCAL_AGENT,
                   LAST_PORT = P_LAST_PORT,
                   NEXT_PORT = P_NEXT_PORT,
                   PILOT_BORDED_AT = P_PILOT_BORDED_AT,
                   PILOT_LEFT_AT = P_PILOT_LEFT_AT,
                   PILOTAGE_FROM_TIME = P_PILOTAGE_FROM_TIME,
                   PILOTAGE_TO_TIME = P_PILOTAGE_TO_TIME,
                   MOORING_FROM_TIME = P_MOORING_FROM_TIME,
                   MOORING_TO_TIME = P_MOORING_TO_TIME,
                   MOORING_LINE_FORD = P_MOORING_LINE_FORD,
                   MOORING_LINE_AFT = P_MOORING_LINE_AFT,
                   WORK_LOCATION_ID = P_WORK_LOCATION_ID,
                   SHIFTED_FROM = P_SHIFTED_FROM,
                   SHIFTED_TO = P_SHIFTED_TO,
                   STERN_POWER_AVAIL = P_STERN_POWER_AVAIL,
                   MASTER_SIGN_DATE = P_MASTER_SIGN_DATE,
                   REMARKS = P_REMARKS,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE PILOTAGES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGES_CUD;



   PROCEDURE COLLECTION_SLIPS_CUD (
      P_ACTION_TYPE         IN     VARCHAR2,
      P_ID                  IN OUT MDA.COLLECTION_SLIPS.ID%TYPE,
      P_FORM_NO             IN     MDA.COLLECTION_SLIPS.FORM_NO%TYPE,
      P_COLLECTION_DATE     IN     MDA.COLLECTION_SLIPS.COLLECTION_DATE%TYPE,
      P_COLLECTED_BY        IN     MDA.COLLECTION_SLIPS.COLLECTED_BY%TYPE,
      P_SLIP_TYPE_ID        IN     MDA.COLLECTION_SLIPS.SLIP_TYPE_ID%TYPE,
      P_LOCAL_VESSEL_ID     IN     MDA.COLLECTION_SLIPS.LOCAL_VESSEL_ID%TYPE,
      P_PORT_DUES_AMOUNT    IN     MDA.COLLECTION_SLIPS.PORT_DUES_AMOUNT%TYPE,
      P_RIVER_DUES_AMOUNT   IN     MDA.COLLECTION_SLIPS.RIVER_DUES_AMOUNT%TYPE,
      P_VAT_AMOUNT          IN     MDA.COLLECTION_SLIPS.VAT_AMOUNT%TYPE,
      P_OTHER_DUES_TITLE    IN     MDA.COLLECTION_SLIPS.OTHER_DUES_TITLE%TYPE,
      P_OTHER_DUES_AMOUNT   IN     MDA.COLLECTION_SLIPS.OTHER_DUES_AMOUNT%TYPE,
      P_PERIOD_FROM         IN     MDA.COLLECTION_SLIPS.PERIOD_FROM%TYPE,
      P_PERIOD_TO           IN     MDA.COLLECTION_SLIPS.PERIOD_TO%TYPE,
      P_STATUS              IN     MDA.COLLECTION_SLIPS.STATUS%TYPE,
      P_USER_ID             IN     NUMBER,
      O_STATUS_CODE            OUT NUMBER,
      O_STATUS_MESSAGE         OUT VARCHAR2)
   IS
      V_GEN_ID             NUMBER;
      V_EXIST_DATA         NUMBER;
      V_SLIP_TYPE_EXT      NUMBER;
      V_LOCAL_VESSEL_EXT   NUMBER;
      V_SUM_OF_PRO         NUMBER;
      V_OPTION_VALUE_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM COLLECTION_SLIPS cs
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS COLLECTION SLIP ALREADY EXIST');

            RETURN;
         END IF;


         IF P_COLLECTION_DATE > SYSDATE
         THEN
            SET_ERROR (99,
                       'SORRY! COLLECTION DATE CANNOT BE GREATER THAN TODAY');

            RETURN;
         END IF;


         IF P_PERIOD_FROM > P_PERIOD_TO
         THEN
            SET_ERROR (
               99,
               'SORRY! PERIOD FROM DATE CANNOT BE GREATER THAN PERIOD TO DATE');

            RETURN;
         END IF;


        <<SLIP_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SLIP_TYPE_EXT
              FROM L_COLLECTION_SLIP_TYPES
             WHERE ID = P_SLIP_TYPE_ID AND STATUS = 'A';

            IF V_SLIP_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SLIP TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SLIP TYPE NOT FOUND');
               RETURN;
         END SLIP_TYPE_VALIDATION;


        <<LOCAL_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_LOCAL_VESSEL_EXT
              FROM LOCAL_VESSELS
             WHERE ID = P_LOCAL_VESSEL_ID AND STATUS = 'A';

            IF V_LOCAL_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID LOCAL VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'LOCAL VESSEL NOT FOUND');
               RETURN;
         END LOCAL_VESSEL_VALIDATION;

        /*
                <<VAT_VALIDATION>>
                 BEGIN
                    SELECT TO_CHAR (
                              (  (  P_PORT_DUES_AMOUNT
                                  + P_RIVER_DUES_AMOUNT
                                  + P_OTHER_DUES_AMOUNT)
                               * 15
                               / 100),
                              99.99)
                      INTO V_SUM_OF_PRO
                      FROM DUAL;

                    SELECT TO_CHAR (OPTION_VALUE, 99.99)
                      INTO V_OPTION_VALUE_EXT
                      FROM OPTION_CONFIG
                     WHERE OPTION_NAME = 'CCS_VAT' AND STATUS = 'A';

                    IF V_SUM_OF_PRO <> V_OPTION_VALUE_EXT
                    THEN
                       SET_ERROR (99, 'SORRY! INVALID VAT');

                       RETURN;
                    END IF;
                 EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                       SET_ERROR (99, 'VAT NOT FOUND');
                       RETURN;
                 END VAT_VALIDATION;

        */



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO COLLECTION_SLIPS (ID,
                                          FORM_NO,
                                          COLLECTION_DATE,
                                          COLLECTED_BY,
                                          SLIP_TYPE_ID,
                                          LOCAL_VESSEL_ID,
                                          PORT_DUES_AMOUNT,
                                          RIVER_DUES_AMOUNT,
                                          VAT_AMOUNT,
                                          OTHER_DUES_TITLE,
                                          OTHER_DUES_AMOUNT,
                                          PERIOD_FROM,
                                          PERIOD_TO,
                                          STATUS,
                                          CREATED_AT,
                                          CREATED_BY)
                 VALUES (V_GEN_ID,
                         P_FORM_NO,
                         P_COLLECTION_DATE,
                         P_USER_ID,
                         P_SLIP_TYPE_ID,
                         P_LOCAL_VESSEL_ID,
                         P_PORT_DUES_AMOUNT,
                         P_RIVER_DUES_AMOUNT,
                         P_VAT_AMOUNT,
                         P_OTHER_DUES_TITLE,
                         P_OTHER_DUES_AMOUNT,
                         P_PERIOD_FROM,
                         P_PERIOD_TO,
                         'P',
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'COLLECTION SLIP CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         IF P_COLLECTION_DATE > SYSDATE
         THEN
            SET_ERROR (99,
                       'SORRY! COLLECTION DATE CANNOT BE GREATER THAN TODAY');

            RETURN;
         END IF;


         IF P_PERIOD_FROM > P_PERIOD_TO
         THEN
            SET_ERROR (
               99,
               'SORRY! PERIOD FROM DATE CANNOT BE GREATER THAN PERIOD TO DATE');

            RETURN;
         END IF;


        <<SLIP_TYPE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_SLIP_TYPE_EXT
              FROM L_COLLECTION_SLIP_TYPES
             WHERE ID = P_SLIP_TYPE_ID AND STATUS = 'A';

            IF V_SLIP_TYPE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID SLIP TYPE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'SLIP TYPE NOT FOUND');
               RETURN;
         END SLIP_TYPE_VALIDATION;


        <<LOCAL_VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_LOCAL_VESSEL_EXT
              FROM LOCAL_VESSELS
             WHERE ID = P_LOCAL_VESSEL_ID AND STATUS = 'A';

            IF V_LOCAL_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID LOCAL VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'LOCAL VESSEL NOT FOUND');
               RETURN;
         END LOCAL_VESSEL_VALIDATION;

        /*
                <<VAT_VALIDATION>>
                 BEGIN
                    SELECT TO_CHAR (
                              (  (  P_PORT_DUES_AMOUNT
                                  + P_RIVER_DUES_AMOUNT
                                  + P_OTHER_DUES_AMOUNT)
                               * 15
                               / 100),
                              99.99)
                      INTO V_SUM_OF_PRO
                      FROM DUAL;

                    SELECT TO_CHAR (OPTION_VALUE, 99.99)
                      INTO V_OPTION_VALUE_EXT
                      FROM OPTION_CONFIG
                     WHERE OPTION_NAME = 'CCS_VAT' AND STATUS = 'A';

                    IF V_SUM_OF_PRO <> V_OPTION_VALUE_EXT
                    THEN
                       SET_ERROR (99, 'SORRY! INVALID VAT');

                       RETURN;
                    END IF;
                 EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                       SET_ERROR (99, 'VAT NOT FOUND');
                       RETURN;
                 END VAT_VALIDATION;

        */



        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE COLLECTION_SLIPS
               SET FORM_NO = P_FORM_NO,
                   COLLECTION_DATE = P_COLLECTION_DATE,
                   COLLECTED_BY = P_USER_ID,
                   SLIP_TYPE_ID = P_SLIP_TYPE_ID,
                   LOCAL_VESSEL_ID = P_LOCAL_VESSEL_ID,
                   PORT_DUES_AMOUNT = P_PORT_DUES_AMOUNT,
                   RIVER_DUES_AMOUNT = P_RIVER_DUES_AMOUNT,
                   VAT_AMOUNT = P_VAT_AMOUNT,
                   OTHER_DUES_TITLE = P_OTHER_DUES_TITLE,
                   OTHER_DUES_AMOUNT = P_OTHER_DUES_AMOUNT,
                   PERIOD_FROM = P_PERIOD_FROM,
                   PERIOD_TO = P_PERIOD_TO,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'COLLECTION SLIP UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE COLLECTION_SLIPS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'COLLECTION SLIP DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END COLLECTION_SLIPS_CUD;



   PROCEDURE PILOTAGE_TUGS_CUD (
      P_ACTION_TYPE           IN     VARCHAR2,
      P_ID                    IN OUT MDA.PILOTAGE_TUGS.ID%TYPE,
      P_TUG_ID                IN     MDA.PILOTAGE_TUGS.TUG_ID%TYPE,
      P_PILOTAGE_ID           IN     MDA.PILOTAGE_TUGS.PILOTAGE_ID%TYPE,
      P_ASSITANCE_FROM_TIME   IN     MDA.PILOTAGE_TUGS.ASSITANCE_FROM_TIME%TYPE,
      P_ASSITANCE_TO_TIME     IN     MDA.PILOTAGE_TUGS.ASSITANCE_TO_TIME%TYPE,
      P_STATUS                IN     MDA.PILOTAGE_TUGS.STATUS%TYPE,
      P_USER_ID               IN     NUMBER,
      O_STATUS_CODE              OUT NUMBER,
      O_STATUS_MESSAGE           OUT VARCHAR2)
   IS
      V_GEN_ID         NUMBER;
      V_EXIST_DATA     NUMBER;
      V_TUG_EXT        NUMBER;
      V_PILOTAGE_EXT   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM PILOTAGE_TUGS pt
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOTAGE TUG ALREADY EXIST');

            RETURN;
         END IF;


        <<TUG_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_TUG_EXT
              FROM TUGS
             WHERE ID = P_TUG_ID AND STATUS = 'A';

            IF V_TUG_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID TUG');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'TUG NOT FOUND');
               RETURN;
         END TUG_VALIDATION;



        <<PILOTAGE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_EXT
              FROM PILOTAGES
             WHERE ID = P_PILOTAGE_ID AND STATUS = 'A';

            IF V_PILOTAGE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE NOT FOUND');
               RETURN;
         END PILOTAGE_VALIDATION;


         IF P_ASSITANCE_FROM_TIME > P_ASSITANCE_TO_TIME
         THEN
            SET_ERROR (
               99,
               'ASSITANCE FROM TIME CANNOT BE GREATER THAN ASSITANCE TO TIME');
            RETURN;
         END IF;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO PILOTAGE_TUGS (ID,
                                       TUG_ID,
                                       PILOTAGE_ID,
                                       ASSITANCE_FROM_TIME,
                                       ASSITANCE_TO_TIME,
                                       STATUS,
                                       CREATED_AT,
                                       CREATED_BY)
                 VALUES (V_GEN_ID,
                         P_TUG_ID,
                         P_PILOTAGE_ID,
                         P_ASSITANCE_FROM_TIME,
                         P_ASSITANCE_TO_TIME,
                         'A',
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TUG CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


        <<TUG_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_TUG_EXT
              FROM TUGS
             WHERE ID = P_TUG_ID AND STATUS = 'A';

            IF V_TUG_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID TUG');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'TUG NOT FOUND');
               RETURN;
         END TUG_VALIDATION;



        <<PILOTAGE_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_PILOTAGE_EXT
              FROM PILOTAGES
             WHERE ID = P_PILOTAGE_ID AND STATUS = 'A';

            IF V_PILOTAGE_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID PILOTAGE');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'PILOTAGE NOT FOUND');
               RETURN;
         END PILOTAGE_VALIDATION;


         IF P_ASSITANCE_FROM_TIME > P_ASSITANCE_TO_TIME
         THEN
            SET_ERROR (
               99,
               'ASSITANCE FROM TIME CANNOT BE GREATER THAN ASSITANCE TO TIME');
            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE PILOTAGE_TUGS
               SET TUG_ID = P_TUG_ID,
                   PILOTAGE_ID = P_PILOTAGE_ID,
                   ASSITANCE_FROM_TIME = P_ASSITANCE_FROM_TIME,
                   ASSITANCE_TO_TIME = P_ASSITANCE_TO_TIME,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TUG UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE PILOTAGE_TUGS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE TUG DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGE_TUGS_CUD;



   PROCEDURE PILOTAGES_APPROVAL_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.PILOTAGES.ID%TYPE,
      P_STATUS           IN     MDA.PILOTAGES.STATUS%TYPE,
      P_USER_ID          IN     NUMBER,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE PILOTAGES
               SET STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE PILOTAGES
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOTAGE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTAGES_APPROVAL_CUD;


   PROCEDURE BERTHING_SCHEDULE_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.BERTHING_SCHEDULE.ID%TYPE,
      P_VESSEL_ID        IN     MDA.BERTHING_SCHEDULE.VESSEL_ID%TYPE,
      P_JETTY_ID         IN     MDA.BERTHING_SCHEDULE.JETTY_ID%TYPE,
      P_CURGO_ID         IN     MDA.BERTHING_SCHEDULE.CURGO_ID%TYPE,
      P_ARIVAL_AT        IN     MDA.BERTHING_SCHEDULE.ARIVAL_AT%TYPE,
      P_BERTHING_AT      IN     MDA.BERTHING_SCHEDULE.BERTHING_AT%TYPE,
      P_SHIFTING_AT      IN     MDA.BERTHING_SCHEDULE.SHIFTING_AT%TYPE,
      P_LEAVING_AT       IN     MDA.BERTHING_SCHEDULE.LEAVING_AT%TYPE,
      P_IMPORT_DISCH     IN     MDA.BERTHING_SCHEDULE.IMPORT_DISCH%TYPE,
      P_B_ON_BOARD       IN     MDA.BERTHING_SCHEDULE.B_ON_BOARD%TYPE,
      P_EXP_LEFTED       IN     MDA.BERTHING_SCHEDULE.EXP_LEFTED%TYPE,
      P_T_ON_BOARD       IN     MDA.BERTHING_SCHEDULE.T_ON_BOARD%TYPE,
      P_LOCAL_AGENT      IN     MDA.BERTHING_SCHEDULE.LOCAL_AGENT%TYPE,
      P_STATUS           IN     MDA.BERTHING_SCHEDULE.STATUS%TYPE,
      P_USER_ID          IN     NUMBER,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;
      V_VESSEL_EXT   NUMBER;
      V_JETTY_EXT    NUMBER;
      V_CURGO_EXT    NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;


         SELECT COUNT (ID)
           INTO V_EXIST_DATA
           FROM BERTHING_SCHEDULE bs
          WHERE ID = P_ID AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS BERTHING SCHEDULE ALREADY EXIST');

            RETURN;
         END IF;


        <<VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_EXT
              FROM FOREIGN_VESSELS
             WHERE ID = P_VESSEL_ID AND STATUS = 'A';

            IF V_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END VESSEL_VALIDATION;



        <<JETTY_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_JETTY_EXT
              FROM JETTY
             WHERE ID = P_JETTY_ID AND STATUS = 'A';

            IF V_JETTY_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID JETTY');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'JETTY NOT FOUND');
               RETURN;
         END JETTY_VALIDATION;



        <<CURGO_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_CURGO_EXT
              FROM CPA_CARGO
             WHERE ID = P_CURGO_ID AND STATUS = 'A';

            IF V_CURGO_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID CURGO');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'CURGO NOT FOUND');
               RETURN;
         END CURGO_VALIDATION;


         IF P_ARIVAL_AT > P_BERTHING_AT
         THEN
            SET_ERROR (99,
                       'ARIVAL DATE CANNOT BE GREATER THAN BERTHING DATE');
            RETURN;
         END IF;


         IF P_SHIFTING_AT > P_LEAVING_AT
         THEN
            SET_ERROR (99,
                       'SHIFTING DATE CANNOT BE GREATER THAN LEAVING DATE');
            RETURN;
         END IF;



        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO BERTHING_SCHEDULE (ID,
                                           VESSEL_ID,
                                           JETTY_ID,
                                           CURGO_ID,
                                           ARIVAL_AT,
                                           BERTHING_AT,
                                           SHIFTING_AT,
                                           LEAVING_AT,
                                           IMPORT_DISCH,
                                           B_ON_BOARD,
                                           EXP_LEFTED,
                                           T_ON_BOARD,
                                           LOCAL_AGENT,
                                           STATUS,
                                           CREATED_AT,
                                           CREATED_BY)
                 VALUES (V_GEN_ID,
                         P_VESSEL_ID,
                         P_JETTY_ID,
                         P_CURGO_ID,
                         P_ARIVAL_AT,
                         P_BERTHING_AT,
                         P_SHIFTING_AT,
                         P_LEAVING_AT,
                         P_IMPORT_DISCH,
                         P_B_ON_BOARD,
                         P_EXP_LEFTED,
                         P_T_ON_BOARD,
                         P_LOCAL_AGENT,
                         P_STATUS,
                         SYSDATE,
                         P_USER_ID);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'BERTHING SCHEDULE CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<VESSEL_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_VESSEL_EXT
              FROM FOREIGN_VESSELS
             WHERE ID = P_VESSEL_ID AND STATUS = 'A';

            IF V_VESSEL_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID VESSEL');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'VESSEL NOT FOUND');
               RETURN;
         END VESSEL_VALIDATION;



        <<JETTY_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_JETTY_EXT
              FROM JETTY
             WHERE ID = P_JETTY_ID AND STATUS = 'A';

            IF V_JETTY_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID JETTY');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'JETTY NOT FOUND');
               RETURN;
         END JETTY_VALIDATION;



        <<CURGO_VALIDATION>>
         BEGIN
            SELECT COUNT (ID)
              INTO V_CURGO_EXT
              FROM CPA_CARGO
             WHERE ID = P_CURGO_ID AND STATUS = 'A';

            IF V_CURGO_EXT <> 1
            THEN
               SET_ERROR (99, 'SORRY! INVALID CURGO');

               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               SET_ERROR (99, 'CURGO NOT FOUND');
               RETURN;
         END CURGO_VALIDATION;


         IF P_ARIVAL_AT > P_BERTHING_AT
         THEN
            SET_ERROR (99,
                       'ARIVAL DATE CANNOT BE GREATER THAN BERTHING DATE');
            RETURN;
         END IF;


         IF P_SHIFTING_AT > P_LEAVING_AT
         THEN
            SET_ERROR (99,
                       'SHIFTING DATE CANNOT BE GREATER THAN LEAVING DATE');
            RETURN;
         END IF;



        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE BERTHING_SCHEDULE
               SET VESSEL_ID = P_VESSEL_ID,
                   JETTY_ID = P_JETTY_ID,
                   CURGO_ID = P_CURGO_ID,
                   ARIVAL_AT = P_ARIVAL_AT,
                   BERTHING_AT = P_BERTHING_AT,
                   SHIFTING_AT = P_SHIFTING_AT,
                   LEAVING_AT = P_LEAVING_AT,
                   IMPORT_DISCH = P_IMPORT_DISCH,
                   B_ON_BOARD = P_B_ON_BOARD,
                   EXP_LEFTED = P_EXP_LEFTED,
                   T_ON_BOARD = P_T_ON_BOARD,
                   LOCAL_AGENT = P_LOCAL_AGENT,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_USER_ID
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'BERTHING SCHEDULE UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE BERTHING_SCHEDULE
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'BERTHING SCHEDULE DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END BERTHING_SCHEDULE_CUD;
END MDA_CORE_PROCE;
/

create PROCEDURE     CPA_VESSELS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.CPA_VESSELS.ID%TYPE,
      P_NAME             IN     MDA.CPA_VESSELS.NAME%TYPE,
      P_VESSEL_TYPE_ID   IN 	MDA.CPA_VESSELS.VESSEL_TYPE_ID%TYPE,
      P_CREATED_BY       IN     MDA.CPA_VESSELS.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.CPA_VESSELS.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.CPA_VESSELS.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       		NUMBER;
      V_EXIST_DATA   		NUMBER;
      V_VESSEL_TYPE_EXT     NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;
		 

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CPA_VESSELS cv
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL ALREADY EXIST');

            RETURN;
         END IF;
		 
		 <<VESSEL_TYPE_VALIDATION>>
		 BEGIN
				SELECT COUNT(ID) 
				INTO V_VESSEL_TYPE_EXT
					
					FROM L_CPA_VESSEL_TYPE
					WHERE ID = P_VESSEL_TYPE_ID
					AND STATUS = 'A';
				
				IF V_VESSEL_TYPE_EXT <> 1
				THEN 
				
						SET_ERROR (99, 'SORRY! INVALID VESSEL TYPE');
				
					RETURN;
				END IF;	
			EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               
			     SET_ERROR (99, 'VESSEL TYPE NOT FOUND');
                 RETURN;
			END VESSEL_TYPE_VALIDATION;
	
		 

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO CPA_VESSELS (ID,
                                     NAME,
                                     VESSEL_TYPE_ID,
                                     STATUS,
                                     CREATED_AT,
                                     CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_VESSEL_TYPE_ID,
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;
		 

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CPA_VESSELS cv
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL ALREADY EXIST');

            RETURN;
         END IF;
		   
		   <<VESSEL_TYPE_VALIDATION>>
		 BEGIN
				SELECT COUNT(ID) 
				INTO V_VESSEL_TYPE_EXT
					
					FROM L_CPA_VESSEL_TYPE
					WHERE ID = P_VESSEL_TYPE_ID
					AND STATUS = 'A';
				
				IF V_VESSEL_TYPE_EXT <> 1
				THEN 
				
						SET_ERROR (99, 'SORRY! INVALID VESSEL TYPE');
				
					RETURN;
				END IF;	
			EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               
			     SET_ERROR (99, 'VESSEL TYPE NOT FOUND');
                 RETURN;
			END VESSEL_TYPE_VALIDATION;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE CPA_VESSELS
               SET NAME = UPPER (P_NAME),
                   VESSEL_TYPE_ID = P_VESSEL_TYPE_ID,
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE CPA_VESSELS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END CPA_VESSELS_CUD;
/

create PROCEDURE     PILOTS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
          
      P_ID IN OUT MDA.PILOTS.ID%TYPE,
      P_NAME IN MDA.PILOTS.NAME%TYPE,
      P_STATUS IN MDA.PILOTS.STATUS%TYPE,

      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM PILOTS ltt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOT NAME ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO PILOTS (ID,
                                     NAME,
                                     STATUS)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOT NAME CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM PILOTS ltt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS PILOT NAME ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE PILOTS
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS
                   
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOT NAME UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE PILOTS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'PILOT NAME DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END PILOTS_CUD;
/

create PROCEDURE     VESSELS_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
          
      P_ID IN OUT MDA.VESSELS.ID%TYPE,
      P_NAME IN MDA.VESSELS.NAME%TYPE,
      P_STATUS IN MDA.VESSELS.STATUS%TYPE,

      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM VESSELS ltt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL NAME ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO VESSELS (ID,
                                     NAME,
                                     STATUS)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL NAME CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM VESSELS ltt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS VESSEL NAME ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE VESSELS
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS
                   
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL NAME UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE VESSELS
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'VESSEL NAME DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END VESSELS_CUD;
/

create PROCEDURE     JETTY_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.JETTY.ID%TYPE,
      P_NAME             IN     MDA.JETTY.NAME%TYPE,
      P_CREATED_BY       IN     MDA.JETTY.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.JETTY.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.JETTY.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM JETTY ltt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS JETTY NAME ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO JETTY (ID,
                                     NAME,
                                     STATUS,
                                     CREATED_AT,
                                     CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'JETTY NAME CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM JETTY ltt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS JETTY NAME ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE JETTY
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'JETTY NAME UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE JETTY
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'JETTY NAME DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END JETTY_CUD;
/

create PROCEDURE     CARGO_CUD (
      P_ACTION_TYPE      IN     VARCHAR2,
      P_ID               IN OUT MDA.CARGO.ID%TYPE,
      P_NAME             IN     MDA.CARGO.NAME%TYPE,
      P_CREATED_BY       IN     MDA.CARGO.CREATED_BY%TYPE,
      P_UPDATED_BY       IN     MDA.CARGO.UPDATED_BY%TYPE,
      P_STATUS           IN     MDA.CARGO.STATUS%TYPE,
      O_STATUS_CODE         OUT NUMBER,
      O_STATUS_MESSAGE      OUT VARCHAR2)
   IS
      V_GEN_ID       NUMBER;
      V_EXIST_DATA   NUMBER;

      PROCEDURE SET_ERROR (P_ERROR_CODE      IN NUMBER,
                           P_ERROR_MESSAGE   IN VARCHAR2)
      IS
      BEGIN
         O_STATUS_CODE := P_ERROR_CODE;
         O_STATUS_MESSAGE := P_ERROR_MESSAGE;
      END SET_ERROR;
   BEGIN
      IF P_ACTION_TYPE = 'I'
      THEN
         IF P_NAME IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;


         V_GEN_ID := MDA_CORE_FUNC.GENERATE_ID;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CARGO ltt
          WHERE UPPER (NAME) = UPPER (P_NAME) AND STATUS NOT IN ('D', 'R');

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS CARGO NAME ALREADY EXIST');

            RETURN;
         END IF;

        <<INSERT_OPERATION>>
         BEGIN
            INSERT INTO CARGO (ID,
                                     NAME,
                                     STATUS,
                                     CREATED_AT,
                                     CREATED_BY)
                 VALUES (V_GEN_ID,
                         UPPER (P_NAME),
                         P_STATUS,
                         SYSDATE,
                         P_CREATED_BY);

            P_ID := V_GEN_ID;
            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CARGO NAME CREATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END INSERT_OPERATION;
      ELSIF P_ACTION_TYPE = 'U'
      THEN
         IF P_NAME IS NULL OR P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

         SELECT COUNT (NAME)
           INTO V_EXIST_DATA
           FROM CARGO ltt
          WHERE     UPPER (NAME) = UPPER (P_NAME)
                AND STATUS NOT IN ('D', 'R')
                AND ID <> P_ID;

         IF V_EXIST_DATA > 0
         THEN
            SET_ERROR (99, 'THIS CARGO NAME ALREADY EXIST');

            RETURN;
         END IF;


        <<UPDATE_OPERATION>>
         BEGIN
            UPDATE CARGO
               SET NAME = UPPER (P_NAME),
                   STATUS = P_STATUS,
                   UPDATED_AT = SYSDATE,
                   UPDATED_BY = P_UPDATED_BY
             WHERE ID = P_ID;


            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CARGO NAME UPDATED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END UPDATE_OPERATION;
      ELSIF P_ACTION_TYPE = 'D'
      THEN
         IF P_ID IS NULL
         THEN
            SET_ERROR (99, 'REQUIRED DATA CAN NOT BE NULL !');

            RETURN;
         END IF;

        <<DELETE_OPERATION>>
         BEGIN
            UPDATE CARGO
               SET STATUS = 'D'
             WHERE ID = P_ID;

            O_STATUS_CODE := 1;
            O_STATUS_MESSAGE := 'CARGO NAME DELETED SUCCESSFULLY';
            COMMIT;
            RETURN;
         EXCEPTION
            WHEN OTHERS
            THEN
               SET_ERROR (SQLCODE, 'EXCEPTION ! ' || SQLERRM);
               RETURN;
         END DELETE_OPERATION;
      ELSE
         SET_ERROR (99, 'INVALID ACTION');
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         SET_ERROR (99, 'PLEASE TRY AGAIN LATER');
         RETURN;
   END CARGO_CUD;
/

